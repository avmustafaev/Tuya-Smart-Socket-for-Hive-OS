from modules.send_to_telegram import do_telega
from modules.make_requests import hiveos_requests_api as os_req_api
from modules.connect_sql import sql_zapros as sqz


"""–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞

–í HiveOS —Å–æ–∑–¥–∞–Ω –∫–æ—à–µ–ª—ë–∫ onoff
–µ—Å–ª–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ == 0 (—Ä–∞–≤–µ–Ω –Ω—É–ª—é)
—Ç–æ —Å–∫—Ä–∏–ø—Ç –Ω–µ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç.
–ü—Ä–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç,
—É–¥–æ–±–Ω–æ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ñ–µ—Ä–º—ã —Ü–µ–ª–∏–∫–æ–º

"""


def is_not_pause():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ id –∫–æ—à–µ–ª—å–∫–∞ onoff
    sql_string = 'SELECT farm_id ' \
                 'FROM farms_id'
    ferm_id = sqz(sql_string, ())[0][0]
    wallet_response = os_req_api(f'{ferm_id}/wallets')['data']
    for row in wallet_response:
        if row.get('name') == 'onoff':
            return check_onoff_wallet(row.get('id'), ferm_id)
    do_telega('üîå –ö–æ—à–µ–ª—ë–∫ onoff –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ—ç—Ç–æ–º—É –ø–∞—É–∑–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è')
    return True


def check_onoff_wallet(onoff_wallet_id, ferm_id):
    try:
        int_onoff = int(os_req_api(
            f'{ferm_id}/wallets/{onoff_wallet_id}').get('wal'))
    except ValueError:
        int_onoff = 33
    if int_onoff:
        return True
    do_telega('üë®üèº‚Äçüîß –í—Å—è —Ñ–µ—Ä–º–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏, —Å–∫—Ä–∏–ø—Ç –Ω–µ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç')
    print('–°–∫—Ä–∏–ø—Ç –Ω–∞ –ø–∞—É–∑–µ')
    return False


def is_watchdoged(rig_watchdog_status, rig_name):
    if rig_watchdog_status is None:
        return compile_send_telegram('ü™± ', rig_name, ': –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ watchdog', False)
    elif not rig_watchdog_status.get('enabled'):
        return compile_send_telegram('üõ† ', rig_name, ': –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –Ω–µ –æ–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—à–∏–±–∫–∏', False)
    return True


def compile_send_telegram(emotion, rig_name, message, bool_response):
    part = f'{emotion}{rig_name}{message}'
    print(part)
    do_telega(part)
    return bool_response


def rig_has_problems(rig_problems, rig_name):
    if rig_problems is not None:
        isnt_prbmls = False
        for ii in rig_problems:
            if ii not in ['has_invalid', 'error_message']:
                isnt_prbmls = compile_send_telegram('ü§¨ ', rig_name, f': {ii}', True)
        return isnt_prbmls
    return False


if __name__ == '__main__':
    print(is_not_pause())
