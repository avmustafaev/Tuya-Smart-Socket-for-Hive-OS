class WalletPause:
    def __init__(self, connector, os_req_api, telega, start_hour, notifyer) -> None:
        self.sqlreq = connector
        self.os_req_api = os_req_api
        self.telega = telega
        self.start_hour = start_hour
        self.add_notify = notifyer

    def get_wallet_info(self, wallet_name):
        # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å SQL-–∑–∞–ø—Ä–æ—Å–∞
        sql_string = "SELECT farm_id FROM farms_id"
        ferm_id = self.sqlreq(sql_string, ())[0][0]
        
        wallet_response = self.os_req_api(f"{ferm_id}/wallets")["data"]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ü–∏–∫–ª–∞ for
        result = next(
            (row.get("id"), row.get("wal")) 
            for row in wallet_response 
            if row.get("name") == wallet_name
        )
        
        if not result:
            self.telega(f"üîå –ö–æ—à–µ–ª—ë–∫ {wallet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return True  # –°–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        
        return result

    def wallet_parameter_true(self, wallet_name):
        # –î–æ–±–∞–≤–ª–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ get_wallet_info –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True
        try:
            value = self.get_wallet_info(wallet_name)
            if isinstance(value, bool):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                return value
            int_parameter = int(value[1])
        except (ValueError, TypeError):
            int_parameter = 1
        return bool(int_parameter)

    def is_not_pause(self):
        wallet_pause = self.wallet_parameter_true("onoff")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ start_hour - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è
        if not wallet_pause:
            if callable(self.start_hour) and self.start_hour():
                self.telega("üë®üèº‚Äçüîß –í—Å—è —Ñ–µ—Ä–º–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏, —Å–∫—Ä–∏–ø—Ç –Ω–µ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç")
            print("–°–∫—Ä–∏–ø—Ç –Ω–∞ –ø–∞—É–∑–µ")
            return False
        return True

    def is_watchdoged(self, rig_watchdog_status, rig_name):
        # –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º early return
        if rig_watchdog_status is None:
            self.add_notify(rig_name, "no_watchdog")
            return False
            
        if not rig_watchdog_status.get("enabled", False):
            self.add_notify(rig_name, "rig_ignored")
            return False
            
        return True

    def rig_has_problems(self, rig_problems, rig_name):
        # –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if rig_problems is None:
            return False
            
        has_problems = False
        ignored_issues = [
            "has_invalid", "error_message", "no_hashrate",
            "missed_hashrate", "overload"
        ]
        
        for issue in rig_problems:
            if issue not in ignored_issues:
                print(issue)
                self.add_notify(rig_name, issue)
                has_problems = issue != "overheat"
                
        return has_problems
